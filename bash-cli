#!/bin/bash
# Name of the script
SCRIPT="docker automation"

# Current version
VERSION="1.0.0"

# Message to display for usage and help.
function usage
{
    local txt=(
        "Utility $SCRIPT for doing stuff."
        "Usage: $SCRIPT [options] <command>"
        ""
        "Command for running docker swarm:"
        "  mysql                running docker service for mysql."
        "  mongo                running docker service for mongo."
        "  nodeApp              running docker service for nodeApp."
        "  redis                running docker service for redis."
        "  traefik              running docker service for traefik."
        "  portainer            running docker service for portainer."
        ""
        "Options:"
        "  --help, -h       Print help."
        "  --version, -v    Print version."
        "  --all, -a        running all docker container."
        "  --delete, -d     delete all docker container."
        "  --create, -c     create container service by list."
        "  --remove, -r     remove container service by list."
    )
    
    printf "%s\n" "${txt[@]}"
}

# Message to display when bad usage.
function badUsage
{
    local message="$1"
    local txt=(
        "For an overview of the command, execute:"
        "use flag --help"
    )
    
    [[ $message ]] && printf "$message\n"

    printf "%s\n" "${txt[@]}"
}

# Message to display for version.
function version
{
    local txt=(
        "$SCRIPT version $VERSION"
    )

    printf "%s\n" "${txt[@]}"
}


# Function for specific command.
function running_apps ()
{
    PWD="$(pwd)"
    # cat "$PWD/$1/docker-compose.yml"
    docker stack deploy --compose-file $1/docker-compose.yml $1
}
function running_all
{
    running_apps "mongo"
    running_apps "mysql"
    running_apps "redis"
    running_apps "portainer"
}
function delete_apps ()
{
    docker service rm $1 $2 $3 $4 $5 $6
}

#
# Process options
#
while (( $# ))
do
    case "$1" in

        --help | -h)
            usage
            exit 0
        ;;

        --version | -v)
            version
            exit 0
        ;;

        --create | -c)
            echo "Creating network app"
            DNETCREATE="$(docker network create -d overlay net_app > /dev/null 2>&1)"
            
            for var in "$@"
            do
                if [ "${var}" = "mongo" ]; then
                    running_apps "mongo"
                fi
                if [ "${var}" = "mysql" ]; then
                    running_apps "mysql"
                fi
                if [ "${var}" = "nodeApp" ]; then
                    echo "ini nodeApp"
                fi
                if [ "${var}" = "redis" ]; then
                    running_apps "redis"
                fi
                if [ "${var}" = "traefik" ]; then
                    echo "ini traefik"
                fi
                if [ "${var}" = "portainer" ]; then
                    running_apps "portainer"
                fi
            done
            exit 0
        ;;
        --remove | -r)
            for var in "$@"
            do
                if [ "${var}" = "mongo" ]; then
                    delete_apps "mongo_db"
                fi
                if [ "${var}" = "mysql" ]; then
                    delete_apps "mysql_db"
                fi
                if [ "${var}" = "nodeApp" ]; then
                    echo "ini nodeApp"
                fi
                if [ "${var}" = "redis" ]; then
                    delete_apps "redis_db"
                fi
                if [ "${var}" = "traefik" ]; then
                    echo "ini traefik"
                fi
                if [ "${var}" = "portainer" ]; then
                    delete_apps "portainer_portainer" "portainer_agent"
                fi
            done
            exit 0
        ;;

        --delete | -d)
            docker service rm $(docker service ls -q)
            exit 0
        ;;
        
        --all | -a)
            running_all
            exit 0
        ;;

        *)
            badUsage "Option/command not recognized."
            exit 1
        ;;
        
    esac
done

badUsage
exit 1
